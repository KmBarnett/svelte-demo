{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../keyboard.svelte",
    "../../screen.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  function punch(e, type) {\n    if (type === \"punch\") {\n      dispatch(type, {\n        number: e.target.name,\n      });\n    } else if (type === \"clear\") {\n      dispatch(type);\n    } else if (type === \"equal\") {\n      dispatch(type);\n    } else if (type === \"operation\") {\n      dispatch(type, {\n        operation: e.target.name,\n      });\n    }\n  }\n\n \n\n  let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n  let operators = [\n    {\n      name: \"add\",\n      symbol: \"+\",\n    },\n    {\n      name: \"minus\",\n      symbol: \"-\",\n    },\n    {\n      name: \"multiply\",\n      symbol: \"*\",\n    },\n    {\n      name: \"divide\",\n      symbol: \"/\",\n    },\n  ];\n</script>\n\n<style>\n  .container {\n    display: flex;\n    margin-bottom: 0.25rem;\n  }\n\n  .key {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 4rem;\n    height: 3rem;\n  }\n\n  .clear {\n    width: 16.2rem;\n  }\n\n  .keys-main {\n    display: flex;\n    flex-wrap: wrap;\n    width: 12.2rem;\n  }\n</style>\n\n<section class=\"Keyboard\">\n  <div class=\"container\">\n    <section class=\"keys-main\">\n      {#each numbers as key}\n        {#if +key > 0}\n          <button\n            name={key}\n            on:click={(e) => punch(e, 'punch')}\n            style=\"order: {key}\"\n            class=\"key\">\n            {key}\n          </button>\n        {:else}\n          <button\n            name={key}\n            on:click={(e) => punch(e, 'punch')}\n            style=\"order: 11\"\n            class=\"key\">\n            {key}\n          </button>\n        {/if}\n      {/each}\n      <button style=\"order: 10\" class=\"key\">(-)</button>\n      <button on:click={(e) => punch(e, 'equal')} style=\"order: 12\" class=\"key\">=</button>\n    </section>\n    <section class=\"keys-operators\">\n      {#each operators as key}\n        <button\n          on:click={(e) => punch(e, 'operation')}\n          name={key.name}\n          class=\"key\">\n          {key.symbol}\n        </button>\n      {/each}\n    </section>\n  </div>\n  <button class=\"clear key\" on:click={(e) => punch(e, 'clear')}>clear</button>\n</section>\n",
    "<script>\n    export let screenValue\n</script>\n\n<style>\n  .Screen {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 16.25rem;\n    height: 3.5rem;\n    border: black solid 1px;\n    margin-bottom: 0.25rem;\n  }\n\n  input {\n      width: 90%;\n      font-size: 2rem;\n      text-align: right;\n  }\n</style>\n\n<section class=\"Screen\">\n  <input disabled type=\"number\" bind:value={screenValue}/>\n</section>\n"
  ],
  "names": [],
  "mappings": "AA6CE,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,OAAO,AACxB,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAED,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,AAChB,CAAC;AC7DD,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,QAAQ,CACf,MAAM,CAAE,MAAM,CACd,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,aAAa,CAAE,OAAO,AACxB,CAAC,AAED,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,KAAK,AACrB,CAAC"
}